@model Model.EF.Touri

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section JsFooter{
    <script>
        $('#btnSelectImage').on('click', function (e) {
            e.preventDefault();
            var finder = new CKFinder();
            finder.selectActionFunction = function (url) {
                $('#txtImage').val(url);
            };
            finder.popup();
        })
    </script>
}

<div class="page-header align-items-start min-vh-100" style="background-image: url('https://images.unsplash.com/photo-1497294815431-9365093b7331?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1950&q=80');">
    <span class="mask bg-gradient-dark opacity-6"></span>
    <div class="container my-auto">
        <div class="row">
            <div class="col-lg-4 col-md-8 col-12 mx-auto">
                <div class="card z-index-0 fadeIn3 fadeInBottom">
                    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                        <div class="bg-gradient-primary shadow-primary border-radius-lg py-3 pe-1">
                            <h4 class="text-white font-weight-bolder text-center mt-2 mb-0">Edit</h4>
                        </div>
                        <div class="card-body">
                            @using (Html.BeginForm(new { @class = "text-start" }))
                            {
                                @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ID)

                                <div class="input-group input-group-outline my-3">

                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = " Name" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">

                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", placeholder = "Description" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">

                                    @Html.TextBoxFor(model => model.Image, new { htmlAttributes = new { @class = "form-control", placeholder = "Image" }, id = "txtImage" })
                                    <a id="btnSelectImage" href="#"> Choose Images </a>
                                    @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">

                                    @Html.EditorFor(model => model.MoreImage, new { htmlAttributes = new { @class = "form-control", placeholder = "More Image" } })
                                    @Html.ValidationMessageFor(model => model.MoreImage, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">


                                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", placeholder = "Price" } })
                                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">

                                    @Html.EditorFor(model => model.PromotionPrice, new { htmlAttributes = new { @class = "form-control", placeholder = "Price" } })
                                    @Html.ValidationMessageFor(model => model.PromotionPrice, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.LabelFor(model => model.PlaceTypeID, "PlaceTypeID", htmlAttributes: new { @class = "control-label col-md-12" })
                                    @Html.DropDownList("PlaceTypeID", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PlaceTypeID, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">

                                    @Html.TextAreaFor(model => model.Schedule, new { htmlAttributes = new { @class = "form-control" }, Rows = "6", cols = "40", @placeholder = "Schedule" })
                                    @Html.ValidationMessageFor(model => model.Schedule, "", new { @class = "text-danger" })

                                </div>


                                <div class="input-group input-group-outline my-3">

                                    @Html.EditorFor(model => model.Quanlity, new { htmlAttributes = new { @class = "form-control", placeholder = "Quanlity" } })
                                    @Html.ValidationMessageFor(model => model.Quanlity, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.LabelFor(model => model.TourisDetailID, "TourisDetailID", htmlAttributes: new { @class = "control-label col-md-12" })

                                    @Html.DropDownList("TourisDetailID", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TourisDetailID, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">


                                    @Html.EditorFor(model => model.MetaTitle, new { htmlAttributes = new { @class = "form-control", placeholder = "Meta Title (CD: Rung-Tram-Nguyen-Sinh)" } })
                                    @Html.ValidationMessageFor(model => model.MetaTitle, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.EditorFor(model => model.ParentID, new { htmlAttributes = new { @class = "form-control", placeholder = "Parent ID" } })
                                    @Html.ValidationMessageFor(model => model.ParentID, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control", placeholder = "Display Order" } })
                                    @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.EditorFor(model => model.SeoTitle, new { htmlAttributes = new { @class = "form-control", placeholder = "SEO Title" } })
                                    @Html.ValidationMessageFor(model => model.SeoTitle, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.EditorFor(model => model.MetaWords, new { htmlAttributes = new { @class = "form-control", placeholder = "Meta Words" } })
                                    @Html.ValidationMessageFor(model => model.MetaWords, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.EditorFor(model => model.MetaDescription, new { htmlAttributes = new { @class = "form-control", placeholder = "Meta Description" } })
                                    @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "text-danger" })

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label " })

                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.Status)
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="input-group input-group-outline my-3">
                                    @Html.EditorFor(model => model.TopHot, new { htmlAttributes = new { @class = "form-control", placeholder = "Top Hot" } })
                                    @Html.ValidationMessageFor(model => model.TopHot, "", new { @class = "text-danger" })

                                </div>

                                <div class="text-center">
                                    <input type="submit" value="Save" class="btn bg-gradient-primary w-100 my-4 mb-2" />
                                    <button type="button" class="btn bg-gradient-primary w-100 my-4 mb-2">@Html.ActionLink("Back to List", "Index")</button>
                                </div>
                            </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--   Core JS Files   -->
    <script src="~/Assets/Admin/js/core/popper.min.js"></script>
    <script src="~/Assets/Admin/js/core/bootstrap.min.js"></script>
    <script src="~/Assets/Admin/js/plugins/perfect-scrollbar.min.js"></script>
    <script src="~/Assets/Admin/js/plugins/smooth-scrollbar.min.js"></script>
    <script>
        var win = navigator.platform.indexOf('Win') > -1;
        if (win && document.querySelector('#sidenav-scrollbar')) {
            var options = {
                damping: '0.5'
            }
            Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
        }
    </script>
    <!-- Github buttons -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>
    <!-- Control Center for Material Dashboard: parallax effects, scripts for the example pages etc -->
    <script src="~/Assets/Admin/js/material-dashboard.min.js?v=3.0.2"></script>
